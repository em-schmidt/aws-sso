(ns aws-sso.credentials
 (:require [babashka.http-client :as http]
           [clojure.tools.logging :as log] 
           [cheshire.core :as json]
           [clojure.instant :as inst]
           [clojure.java.io :as io]
           [com.grzm.awyeah.credentials :as aws.credentials]
           [com.grzm.awyeah.config :as aws.config])
 (:import (java.io 
            File) 
          (java.time Instant)
          (java.util Date)))

(defn read-aws-config
  "Read the profile info from the main aws cli/sdk configuration file."
  [path profile]
  (let [f (io/file path)
        _ (log/debugf "reading profile=%s" f)
        profiles (aws.config/parse f)
        profile-info (get profiles profile)]
    {:profile profile
     :start-url (get profile-info "sso_start_url" nil)
     :region (or (get profile-info "sso_region") 
                 (System/getenv "AWS_REGION")
                 (get profile-info "region"))
     :account-id (get profile-info "sso_account_id" nil)
     :role-name (get profile-info "sso_role_name" nil)}))

(defn expired? 
  [datestr]
  (let [now (java.util.Date.)
        expires-at (inst/read-instant-date datestr)]
   (<= 0 (compare now expires-at))))

(defn get-token-from-sso-cache
  "Traverse all cached credential files found in ~/.aws/sso/cache
  parse them (they're json) and return token if found in any of these files.
  There's always one with a valid token, but the name is auto-generated and it also might expire."
  [sso-cache-path]
  (log/debugf "reading-sso-cache %s" sso-cache-path)
  (let [auth-data (->> sso-cache-path
                       io/file
                       file-seq
                       (filter (memfn ^File isFile))
                       (filter #(re-find #"json$" (.getName %)))
                       (map slurp)
                       (map #(json/parse-string % true))
                       (filter :accessToken)
                       first)
        {:keys [accessToken expiresAt]} auth-data]
    (when (and accessToken expiresAt
               ;; expiresAt here IS NOT iso8601 but some date-time str
               ;; with UTC appened (wtf) - so we have to convert it to a zoned date time
               ;; note that this is different expiration time and AWS creds expiration time:
               ;; - local access token as generated by SSO lasts 24 hrs
               ;; - aws creds fetched below expire within an hour usually
               ;; The former requires manual refresh via `aws sso login`
               ;; the latter will be refreshed by Cognitect's credentials machinery
               (not (expired? expiresAt)))
      accessToken)))

(defn make-request 
  [{:keys [token portal-url]}]
  (-> (http/get portal-url {:headers { "x-amz-sso_bearer_token" token}})
      :body
      (json/parse-string true)))

(defn get-credentials-from-sso-api
  "Implements call to https://docs.aws.amazon.com/singlesignon/latest/PortalAPIReference/API_GetRoleCredentials.html"
  [{:keys [sso token]}]
  (let [url (format 
              "https://portal.sso.%s.amazonaws.com:443/federation/credentials?account_id=%s&role_name=%s"
              (:region sso)
              (:account-id sso)
              (:role-name sso))
        _ (log/debugf "requesting-token region=%s account-id=%s role=%s" (:region sso) (:account-id sso)  (:role-name sso))
        body (make-request {:token token :portal-url url})]
    (:roleCredentials body)))

(defn fetch-credentials-from-sso-profile 
  "Fetches temporary AWS credentials for given config profile:
  - read sso info for given profile  from the aws config
  - parse out pre-authd SSO access token from the SSO cache
  - make a request to the AWS API to get the credentials"
  ([]
   (fetch-credentials-from-sso-profile (System/getenv "AWS_PROFILE")))
  ([profile-name]
   (fetch-credentials-from-sso-profile profile-name (or 
                                                      (System/getenv "AWS_CONFIG_HOME") 
                                                      (str (System/getenv "HOME") "/.aws"))))
  ([profile-name aws-root]
   (let [sso-config (read-aws-config (str aws-root "/config") profile-name)]
     (if (:start-url sso-config)
       (let [access-token (get-token-from-sso-cache (str aws-root "/sso/cache"))]
        (if access-token
         (get-credentials-from-sso-api {:sso sso-config
                                        :token access-token})
         (do (log/warn "AWS SSO auth missing or expired, login via SSO if needed")
             nil)))
       (do (log/info "profile not an SSO profile, no sso_start_url found." {:profile profile-name})
           nil)))))

(defn fetch-from-profile
  []
  (if-let [{:keys [accessKeyId secretAccessKey sessionToken expiration]} (fetch-credentials-from-sso-profile)]
    (let [expiration-inst (Date/from (Instant/ofEpochMilli expiration))]
      {:aws/access-key-id accessKeyId
       :aws/secret-access-key secretAccessKey
       :aws/session-token sessionToken
       :aws.credentials/ttl (aws.credentials/calculate-ttl {:Expiration expiration-inst})})
    nil))

(defn provider
  "Creates a credential provider which periodically refreshes credentials
  by using the SSO profile"
  []
  (aws.credentials/cached-credentials
    (reify aws.credentials/CredentialsProvider
      (fetch [_]
        (try
          (fetch-from-profile)
          (catch Exception e
            (log/errorf e "failed to refresh credentials")))))))

(comment 
  (fetch-from-profile)
  (provider))
